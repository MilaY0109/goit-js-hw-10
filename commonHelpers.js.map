{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst btnTimerStart = document.querySelector('[data-start]');\nconst timerFieldDays = document.querySelector('[data-days]');\nconst timerFielHours = document.querySelector('[data-hours]');\nconst timerFieldMinutes = document.querySelector('[data-minutes]');\nconst timerFieldSeconds = document.querySelector('[data-seconds]');\n\nbtnTimerStart.disabled = true;\nlet timerId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    const currentDate = new Date();\n\n    if (selectedDates[0] - currentDate > 0) {\n      btnTimerStart.disabled = false;\n    } else {\n      btnTimerStart.disabled = true;\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        timeout: 1500,\n        width: 400,\n      });\n    }\n  },\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, 0);\n}\n\nfunction onTimerStart() {\n  const selectedDate = fp.selectedDates[0];\n\n  timerId = setInterval(() => {\n    const startTime = new Date();\n    const countdown = selectedDate - startTime;\n    btnTimerStart.disabled = true;\n\n    if (countdown < 0) {\n      clearInterval(timerId);\n      return;\n    }\n    updateTimerFace(convertMs(countdown));\n  }, 1_000);\n}\n\nfunction updateTimerFace({ days, hours, minutes, seconds }) {\n  timerFieldDays.textContent = addLeadingZero(days);\n  timerFielHours.textContent = addLeadingZero(hours);\n  timerFieldMinutes.textContent = addLeadingZero(minutes);\n  timerFieldSeconds.textContent = addLeadingZero(seconds);\n}\n\nconst fp = flatpickr('#datetime-picker', options);\n\nbtnTimerStart.addEventListener('click', onTimerStart);\n"],"names":["btnTimerStart","timerFieldDays","timerFielHours","timerFieldMinutes","timerFieldSeconds","timerId","options","selectedDates","currentDate","iziToast","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","onTimerStart","selectedDate","fp","startTime","countdown","updateTimerFace","flatpickr"],"mappings":"+IAKA,MAAMA,EAAgB,SAAS,cAAc,cAAc,EACrDC,EAAiB,SAAS,cAAc,aAAa,EACrDC,EAAiB,SAAS,cAAc,cAAc,EACtDC,EAAoB,SAAS,cAAc,gBAAgB,EAC3DC,EAAoB,SAAS,cAAc,gBAAgB,EAEjEJ,EAAc,SAAW,GACzB,IAAIK,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KAEpBD,EAAc,GAAKC,EAAc,EACnCR,EAAc,SAAW,IAEzBA,EAAc,SAAW,GACzBS,EAAS,MAAM,CACb,QAAS,qCACT,QAAS,KACT,MAAO,GACf,CAAO,EAEJ,CACH,EAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,CAAC,CACpC,CAEA,SAASC,GAAe,CACtB,MAAMC,EAAeC,EAAG,cAAc,GAEtCf,EAAU,YAAY,IAAM,CAC1B,MAAMgB,EAAY,IAAI,KAChBC,EAAYH,EAAeE,EAGjC,GAFArB,EAAc,SAAW,GAErBsB,EAAY,EAAG,CACjB,cAAcjB,CAAO,EACrB,MACD,CACDkB,EAAgBb,EAAUY,CAAS,CAAC,CACrC,EAAE,GAAK,CACV,CAEA,SAASC,EAAgB,CAAE,KAAAX,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1Dd,EAAe,YAAce,EAAeJ,CAAI,EAChDV,EAAe,YAAcc,EAAeH,CAAK,EACjDV,EAAkB,YAAca,EAAeF,CAAO,EACtDV,EAAkB,YAAcY,EAAeD,CAAO,CACxD,CAEA,MAAMK,EAAKI,EAAU,mBAAoBlB,CAAO,EAEhDN,EAAc,iBAAiB,QAASkB,CAAY"}